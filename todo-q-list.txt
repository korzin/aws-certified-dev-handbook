        EC2:R  >>  Step3: Configure instance details(most unknown for me Tanency,  T2, Shutdown etc..)
        EC2:R  >>  All scenario based 2-3 lines revolving around assigning Elastic address
        EC2:R  >>  AMI, AKI, ARI
        EC2:R  >>  EC2 ERRORS
        EC2:r  >>  Auto Scaling group
        AMI:R  >>  From what you can create an image(EC2 instance, main volume, ebs volume, snapshot)

        EBS:R  >>  do task in lab(Web academy  - EBS) about measuring IOPS with filesystem. Understand average numbers in IOPS, alernatives
        EBS:R  >>  Encryption: AWS managed keys, encrypted filesystem (customer managed keys) . encrypted data at application side(Apps encrypt/desrypt data on client side | customer managed keys | Third party assistence)

        SNAP:R  >>  Snapshot states

--->
        SNAP:R  >>  When you cant delete snapshot
        SNAP:R  >>  EBS - snapshots, encryption, attaching and detaching
        SNAP:M  >>  To encrypt unencrypted snapshop you have to copy that snapshot and shoose option enctypt



        VPC:R  >>  public address to access the instance and NAT in subnet, Cover Ryan's Video that should suffice.
        VPC:R:M  >>  VPC Limits (5 vpc, 5 internet gateways, 50 customer gateways per region, 50 vpn, 200 route tables per region, 5 elastic IP addresses, 500 security groups per VPC, 50 rules per security group, 5 security groups per network interface)
        VPC:IG:M  >>  You can't detach internet gateway when somebody use resources in VPC
        VPC:RT:M  >>  Route table contains set of rules, called routes, that are used to determine where network traffic is directed.
        VPC:RT:R  >>  Main route table
        VPC:SUB:M  >>  Subnets cannot span availability zones
        VPC:R  >>  Intenet gateway - connec5 tto ninternet
        VPC:R  >>  VPC - connect to VPN (propbably not deep)
        VPC:R  >>  Direct connect
        VPC:R  >>  VPC peering, connect to other vpc
        VPC:R  >>  Statefull vs stateless (ACL + SG)
        VPC:R  >>  Routes : Associated with subnets
        VPC:R  >>  Routes: Route to Internet gateway to get internet (public subnet)
        VPC:R  >>  Routes: virtual private gateway to get on premice network
        VPC:R  >>  Route: peering connections to get peered VPC
        VPC:R  >>  Main route table
        VPC:M  >>  When you launch an instance into a VPC, we provide the instance with a private DNS hostname, and a public DNS hostname if the instance receives a public IPv4 address. If domain-name-servers in your DHCP options is set to AmazonProvidedDNS, the public DNS hostname takes the form ec2-public-ipv4-address.compute-1.amazonaws.com for the us-east-1 region, and ec2-public-ipv4-address.region.compute.amazonaws.com for other regions. The private hostname takes the form ip-private-ipv4-address.ec2.internal for the us-east-1 region, and ip-private-ipv4-address.region.compute.internal for other regions. To change these to custom DNS hostnames, you must set domain-name-servers to a custom DNS server.
        VPC:R  >>  Troubleshooting Conectivity: Outside VPC to instance in VPC :: Gateway(IGW or VPG) attached, Routing rules from corp network to VPC, Routing table on VPC or subnet, EIP or public IP on instance, NACLs, SG, Os-level firewals
        VPC:M  >>  Subnet VPC: 200




        DYNAMO:M  >>  WCU = 1 write of 1 item of 1KB or less per second
        DYNAMO:R  >>  WCU
        DYNAMO:R  >>  RCU
        DYNAMO:M  >>  1 RCU = 1 read of 1 item of 4KB or less per second (stringly consistent)
        DUNAMO:M  >>  Eventually consistent reads require half of RCU
        DUNAMO:R  >>  LSI
        DYNAMO:R  >>  GSI
        DYNAMO:M  >>  You can't do stringly consistent reads on GSI
        DYNAMO:M  >>  GSI consume read and write capacity independently from the main table and have their WCU and RCU provided thoughput
        DYNAMO:M  >>  You can create GSI after table is created
        DYNAMO:M  >>  LSII Primary Keys are composite keys (partition and sort key)
        DYNAMO:M  >>  Each LSI act as another sort key
        DYNAMO:M  >>  Each LSI kept in sync with the base table
        DYNAMO:M  >>  Read and Write capacity for local secondary indexes is taken from the capacity of the base table
        DYNAMO:M  >>  LSIs must be created when table is created
        DYNAMO:R  >>  Conditional check failed excaption
        DYNAMO:R  >>  Atomic counters
        DYNAMO:R  >>  Conditional Writes
        DYNAMO:R  >>  Limits
        DYNAMO:R  >>  Errors
        DYNAMO:R  >>  Optimising DynamoDB operations (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScanGuidelines.html)
        DYNAMO:R  >>  understanding of how global and local indices relate to provisioned throughput
        DYNAMO:R  >>  ProjectionExpression parameter
        DYNAMO:R  >>  DynamoDb &amp; IAM. Conditions .(eq, else)
        DYNAMO:R  >>  dynamoLLeadingKeys
        DYNAMO:M  >>  DynamoDB Throughput Exceeded: ProvisionedThroughputExceededException  ,DynamoDB Item size: 400KB  ,DynamoDB Local+Global Secondary Index: 5 for each  ,DynamoDB Max Tables Per: 256 tables  ,DynamoDB Attributes (column): Unlimited Region  ,DynamoDB doesn’t consume capacity units if it’s just modifying Table  ,DynamoDB (Scan/Query): ProjectionExpression  ,DynamoDB query item by partition: GetItem  ,DynamoDB query multiple item (up to 100 items + Max 16MB): BatchGetItem  ,DynamoDB scan data: 1MB  ,DynamoDB Reserved Capacity: 100 Capacity  ,DynamoDB list up to 100 tables: ListTables
        DYNAMO:R  >> Throughput error (like if not Table then what is the cause)
        DYNAMO:R  >>   hash and range keys .  how to optimize each for specific queries for the best performance
        DYNAMO:R  >>   number of records.
        DYNAMO:R  >>   Optimizing performance for DynamoDB


        S3:R  >>  S3 bucket name requirement(DNS complient, else)
        S3:R  >>  Region, where s3 store data
        S3:M  >>  Bucket limitations: oly 100 buckets within account, Bucket ownership cannot be trandfered once a bucket is created, Can hold unlimited objects
        S3:R  >>  S3 limitations in details. Is it true that s3 can hold unlimited amount of objects. What if we would speak about Terabytes
        S3:R  >>  S3 read consistency rules(have to rememeber)
        S3:R  >>  Have to be aware of http error responces from s3
        S3:R  >>  s3 Event notification
        S3:R  >>  Variaty of imports to S3
        S3:R  >>  When and how S3 break file on chunks when you import large files (>; 5gb)
        S3:R  >>  Storage gateway
        S3:R  >>  Gateway-Cached Volumes , Gateway-Storage volumes
        S3:R  >>  Performance
        S3:R  >>  Partitions, not too deep
        S3:R  >>  Mixed request workloads(keys etc)
        S3:R  >>  S3 Intensive workloadss
        S3:R  >>  Other Performance optimization
        S3:M  >>  All buckets and objects are private by default - only the resource owner has access
        S3:M  >>  Access to resource can be granted by two classic ways: Resource based policy OR IAM policy
        S3:M  >>  There are two kinds of resource based policies in S3: Bucket policies AND S3 Access Control Lists(ACLs)
        S3:R  >>  Bucket policies AND S3 ACLs
        S3:M  >>  IAM Policies can't grant access to anonymous users
        S3:M  >>  Bucket policy working only within account. It isn't work if access to bucket granted to another account(see crossaccounting)
        S3:R  >>  S3 Encryption
        S3:M  >>  Types of S3 encryption:  1) In-transit/Client Side. Using SSL or client side encryption 2) At rest. Request that S3 encrypt objects for you
        S3:R  >>  S3 versioning (R about Enabling versioning, Deleting versioned objects, restoring versioned objects)
        S3:R  >>  Access : IAM Policies, Bucket policies, Access control lists, Temporary credentials (used for signed url)
        S3:R  >>  Read a blog &quot;Iam policies and Bucket Policies and ACLs! oh myy!&quot;
        S3:R  >>  Optimising S3 Key (File) names for heavy load (http://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html)
        S3:R  >>   Almost all api calls (includes: AbortMultipartUpload  CompleteMultipartUpload  CopyObject  CreateBucket  DeleteBucket  DeleteObject  GetBucketPolicy)
        S3:R  >>  Enrcyption: Serverside (Aws managed keys and customer-managed keys), Client side (Client code encrypt/decrypt and key is customer managed imdependently of amazon s3)
        S3:R  >>  Optimising S3 Key (File) names for heavy load (http://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html)
        S3:R  >>   S3 web service headers
        S3:R  >>  best filename format in S3 to optimize performance.
        S3:R  >>   S3 - 15 Questions.  CORS, Static Hosting, S3 Encryption Header, S3 Performance optimisation(Mostly on adding uniqueness before the key),Bucket policy and ACL (basically how to restrict),Limits (like total bucket )
        S3:R  >>  bucket-acl
        S3:R  >>  Structure of dns name for public s3 objects
        S3:R  >>  If you encrypt a bucket on S3, what type of encryption does AWS use?
        S3:M  >>   What is the largest size file you can transfer to S3 using a PUT operation? 5GB
        S3:M  >>  Max object size in S3 is 5 Tb. Min is 0 bytes

        SQS:R  >>  SQS message formats and properties
        SQS:M  >>  SQS message retained: 14 days  ,SQS message: 256 KB of text in any format (10 items max)  ,SQS timeout: 30 seconds (default) 12 hours (max)  ,SQS long polling: 20 seconds(default/max) 1 sec(min)  ,SQS is PCI DSS certified  ,SQS/SNS visibility: ChangeMessageVisiblity  ,SQS/SNS delete: DeleteMessage
        SQS:R  >>  Basic SQS functionality, Protocols used and ,Long Polling ,Max Visibility timeout scenario Questions
        SQS:R  >>  DelaySeconds
        EFS:M  >>  The storage capacity will increase and decrease as you add or remove foles
        EFS:M  >>  Benefits of EFS: * Can be accessed by multiple EC2I at the same time, * Multiple EC2I can access same data, * Can be mounted to on-premise servers(see AWS Direct Connect) , * Allow migrate data to and from on-oremice servers, * Can scale on petabytes in size, maintaining law latency, * Only pay for what you use
        EFS:M  >>  You can mount EFS to EC2 on creation(like EBS volumes), but you can connect it via CLI when you connected to instance through SSH or using User Data script

        EB:R  >>   Resources that Elastic Beanstalk can create
        EB:R  >>  SUpported Elastic Beanstalk Platforms

        STS:R  >>  Request for credentials to STS API, can be through web console
        STS:R  >>  Requested credentials of STS API call, contains: Sec. Token, Access Key ID, Secret Access Key
        STS:R  >>  STS API Calls: AssumeRole, AssumeRoleWithWebIdentity, AssumeRoleWithSAML, GetFederationToken, GetSessionToken
        KMS:R  >>  KMS API Actions : Encrypt, GenerateDataKey, Decrypt
        ELB:R  >>  Maitaining Session State with ELB (ELB Option1, ELB Option2, Non-ELB Option(Recommended))
        ELB:R  >>  Application LB
        ELB:R  >>  Network LB
        ELB:R  >>  TLS termination in App load balancer. (+ Q: Is that feature presented in Network LB)

        LAMBDA:R  >>  Packages
        LAMBDA:R  >>  VPC for Lambda. What access lambda can get without roles
        LAMBDA:R  >>  Review all API actions
        LAMBDA:R  >>  REMEMBER fucking Lambda triggers , and everything about them
        LAMBDA:R  >>   lambda concurrency and scale model
        LAMBDA:M  >>  All calls made to AWS Lambda must complete execution within 300 seconds. The default timeout is 3 seconds, but you can set the timeout to any value between 1 and 300 seconds.\

        EC:R  >>  Caching stratefies(Lazy loading, Write through, adding time to live(TTL)

        SNS:M  >>  SNS Subscriber is an endpoin that a message is sent to
        SNS:M  >>  Avalable endpoins include: HTTP, HTTPS, Email, Email-JSON, SQS, Webapp, mobile app, LAMBDA, SMS
        SNS:R  >>  Review SNS topic policies
        SNS:R  >>  SNS Message body(message, messageId, signature, signatureversion ,,,,,)
        SNS:R  >>  Message attribute sue cases
        SNS:R  >>  SNS API Actions, review, maybe remember? not sure
        SNS:R  >>  http://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-devicetoken.html
        SNS:R  >>  Amazon Mobile Devices and SNS Mobile Push notifiations. http://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-devicetoken.html
        SNS:R  >> API calls
        SNS:R  >>  Basic Functionality ,Do check the Format of the SNS Notification and Field used in (JSON ),Fanout concept
        SNS:M  >>  SNS pending: 3 days  ,SNS Topic: 100,000  ,SNS endpoint API: CreatePlatformEndPoint
        SNS:R  >>  SNS message format
        SNS:R  >>  SNS message format
        SNS:R  >>  http://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-devicetoken.html

        CF:R  >>  CloudFormation Output section and Function you would use
        CF:R  >>  CloudFormation template anatomy (different sections)
        CF:M  >>  to get Output Data: Fn:GetAtt  , List all Resources: ListStackResources  , stack waiting: WaitCondition  ,  stack: 200  ,  Template: No limit  ,  Parameter: 60
        CF:R  >>  How exaply CF updating stack. If I have already running ec2i and I want to change ssh key. ec2i will be restarted, stopped-started or maybe terminated after launching of another ec2i
------------------------------------------------------------------------------------------------------------------------

        AWS:R  >>  Transfering ownership of resources to another user, to anothar account. From user of one account to user from another account
        IAM:R  >>  Variables in Policy (like ${aws.username} ). What kind of variables exist. Where else we can put these variables.

        ELB:R  >>   X-Forwarded-for
        ELB:R  >>  Where and how many security group can be attached to( ELB, EC2, other)

        ELB:R  >>  multiple SSL certificates on an Elastic Load Balancer.
        AWS:M  >>  The default region for an SDK is &quot;US-EAST-1&quot;.
        AWS:R  >>  Restrict Viewer Access (Use Signed URLs or Signed Cookies)
        APIG:M  >>  Host names APIs in API Gateway, which are deployed to a specific region and of the {rest-api-id}.execute-api.{region}.amazonaws.com format.
        AWS:R  >>  Where names should be unique (to all services. For example . IAM(global, w/p region), what entities should have unique names(e.g. Policy name, Role name). Another example maybe from some region specific AWS service)
        IAM:R  >>  Options on authenticating using LDAP together with IAM.
        EB:R  >>  Resources that Elastic Beanstalk can create
        AWS:R  >>  CORS in AWS
        ELB:R  >>  ELB and session cookies (http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html)
        AWS:R  >>  AWS Import/Export. For what, benefits
        AWS:R  >>  AWS Snowball. For what benefits, usecases
        AWS:R  >>  LIMITS IN AWS GIVE YOU % POINTS ON EXAM. * Know/review limits for S3, DynamoDB, EC2, SNS, and SQS.
        AWS:R  >>   which AWS services are key-based
        AWS:R  >>  identity broker integrates with sts
        AWS:M  >>  The AWS sign-in endpoint for SAML is https://signin.aws.amazon.com/saml
        AWS:R  >>  How Web identity federation allow you to sigh in using facebook. Step by step what is happen. When and how you login through facebook, what you get(token , else) ,
        AWS:M  >>  SAML stands for Security Assertion Markup Language.
        COGNITO:R  >> Identity pools
        APIG:M  >>  You can use API Gateway with SOAP

        KMS:R  >>  wtf is key material
        KMS:R  >>  Memorise whole fucking API. will be on exam
        KMS:R  >>  wtf is key rotation
        AWS:R  >>  DIff SG vs ACL

        IAM:M  >>  IAM do not restrict rrafic, it restrict API calls and actions

        AWS:M  >>  Ping utility use ICMP protocol
        AWS:R  >>  When to use which: SSL over web, VPN for IPSec, Direct connect, Import/Export
        AWS:M  >>  If you will be asked about which services can store enrypted data,  you have to look from speed perspective. If service built to provide high performance then it doesn't store encrypted data. There are 5 answers and i'll mark three right from them : EBS volumes (+) , S3(+), Inctance stored volumes(-) , Redshift (+) ,  DynamoDb(-)  , ElasticCache (-)
        AWS:R  >>  Remenber Shared Responsibility Model (e.g. Aws responsibilities : Facilities, Phisical sec, physical infrastructure, netwrold else) , Cystomer responsibility: (OS, App, SG, OS firewalls Network config, Acc managment)
        AWS:R  >>  Troubleshooting Limits Issues :: * AWS has many soft limits, * Plus a few hard limits.  .
        AWS:R  >>  Troubleshooting Limits Issues :What if you achive a lmit (how to increase)
        ECS:M  >>  If you use Amazon ECS CLI (not a AWS CLI) then you have benefits as support of Docker Compose
        ECS:R  >>  ECR repository police and IAM user access policy
        53:M  >>  Record types : * A  : IPv4 * AAAA : IPv6, CAA : A CAA record lets you specify which certificate authorities (CAs) are allowed to issue certificates for a domain or subdomain.(docs ref: https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html?shortFooter=true#CAAFormat) * CNAME : Specify domain, such ass 'hostname.example.com' * MX : Used to specify email servers with priorities (e.g. '10 mail.example.com' ) * NS :  identifies the name servers for the hosted zone (e.g. 'ns-1.example.com') * PTR : the same as CNAME * SOA : A start of authority (SOA) record provides information about a domain and the corresponding Amazon Route 53 hosted zone (e.g. ns-2048.awsdns-64.net hostmaster.awsdns.com 1 1 1 1 60) *
        IAM:M  >>   When a new AWS root account is created, it is &quot;best practice&quot; to complete these 5 steps: 1. Delete your root access keys 2. Activate MFA on your root account 3. Create individual IAM users 4 User groups to assign persmissions 5. Apply an IAM password policy
        AWS:R  >>  Remember all various service parameter values e.g. timers, max limits, etc. for S3, SQS, DynamoDB
        ELB:R  >>  ELB Session Stickiness. Scenario question which got my thinking for quite some time.
        IAM:R  >>  Options on authenticating using LDAP together with IAM.
        AWS:R  >>  CORS check where it can be used
        ELB:R  >>  ELB and session cookies (http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html)
        SWF:R  >>  API calls

        AWS:M  >>  Encryption: 256-bit Advanced Encryption Standard (AES-256)
        SWF:M  >>  SWF retention: 1 year  ,SWF Domain: 100 per account (containers for segregating app resources)  ,SWF Workflow/activity-10,000  ,SWF Request size: 1MB  ,SWF Open: 1000
        AWS:R  >>  Web Federation, Corporate network,
        ELB:R  >>  Sticky-sessions with ELB
        AWS:M  >>   400 - Server does not understand the request. (MissingAction, MissingParameter, incompleteSignature, invalidParameterValue, incompleteBody)  403 - forbidden (Ex: AccessDenied, InvalidClientTokenID, MalformedQueryString, invalidObjectState)  404 - The page URL request cannot be found due to the Server Down Time or Broken Links. (Ex: NoSuchBucket, NoSuchVersion,NoBucketPolicy)  409-  BucketAlreadyExists,InvalidBucketState,BucketNotEmpty,OperationAborted,RestoreAlreadyInProgress
        AWS:M  >>  SDK default region Default region (us-east-1)

        AWS:R  >>  One guy wrote sume dump from exam. I didn't get it: its like two Q, or only one Q ::::: Elastic Cache to avoid the session state problem
        SWF:R  >>  Basic Functionality Scenario Based(like what all the functionally used by SWF
        AWS:R >> CloudFront

