        VPC:R  >>  VPC - connect to VPN (propbably not deep)
        SQS:R  >>  SQS message formats and properties
        EB:R  >>   Resources that Elastic Beanstalk can create
        EB:R  >>  Supported Elastic Beanstalk Platforms
        EB:R  >>   Beanstalk : for what i have to pay
        STS:R  >>  Request for credentials to STS API, can be through web console
        STS:R  >>  Requested credentials of STS API call, contains: Sec. Token, Access Key ID, Secret Access Key
        STS:R  >>  STS API Calls: AssumeRole, AssumeRoleWithWebIdentity, AssumeRoleWithSAML, GetFederationToken, GetSessionToken
        LAMBDA:R  >>  Review all API actions
        LAMBDA:R  >>  lambda concurrency and scale model
        EC:R  >>  Caching stratefies(Lazy loading, Write through, adding time to live(TTL)
        SNS:R  >>  SNS Message body, properties/headers(message, messageId, signature, signatureversion ,,,,,)
        SNS:R  >>  Amazon Mobile Devices and SNS Mobile Push notifiations. http://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-devicetoken.html
        SNS:R  >>  API calls
        SNS:R  >>  Basic Functionality ,Do check the Format of the SNS Notification and Field used in (JSON ),Fanout concept
        SNS:M  >>  SNS pending: 3 days  ,SNS Topic: 100,000  ,SNS endpoint API: CreatePlatformEndPoint
        AWS:R  >>  Transfering ownership of resources to another user, to anothar account. From user of one account to user from another account
        AWS:R  >>  Restrict Viewer Access (Use Signed URLs or Signed Cookies)
        IAM:R  >>  Options on authenticating using LDAP together with IAM.
        AWS:R  >>   which AWS services are key-based
        AWS:R  >>  identity broker integrates with sts
        AWS:M  >>  The AWS sign-in endpoint for SAML is https://signin.aws.amazon.com/saml
        AWS:R  >>  How Web identity federation allow you to sigh in using facebook. Step by step what is happen. When and how you login through facebook, what you get(token , else) ,
        COGNITO:R  >> Identity pools
        KMS:R  >>  wtf is key material
        KMS:R  >>  Memorise whole fucking API. will be on exam
        KMS:R  >>  wtf is key rotation
        AWS:R  >>  When to use which: SSL over web, VPN for IPSec, Direct connect, Import/Export
        ECS:R  >>  ECR repository police and IAM user access policy
        53:M  >>  Record types : * A  : IPv4 * AAAA : IPv6, CAA : A CAA record lets you specify which certificate authorities (CAs) are allowed to issue certificates for a domain or subdomain.(docs ref: https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html?shortFooter=true#CAAFormat) * CNAME : Specify domain, such ass 'hostname.example.com' * MX : Used to specify email servers with priorities (e.g. '10 mail.example.com' ) * NS :  identifies the name servers for the hosted zone (e.g. 'ns-1.example.com') * PTR : the same as CNAME * SOA : A start of authority (SOA) record provides information about a domain and the corresponding Amazon Route 53 hosted zone (e.g. ns-2048.awsdns-64.net hostmaster.awsdns.com 1 1 1 1 60) *
        53:R  >>  Private Hosted Zone
        53:R  >> Price for types of record
        53:R >> There is a limit of 50 domain names however this limit can be raised by contacting AWS support.
        53:M >> Direct 75% traffic to one page and 25% to another page. What DNS Routing Policy can help you achieve this? Weighted Round Robin (WRR)
        53:R:M >> (R: What min and max interval) By default, health check observations are conducted at an interval of 30 seconds. You can optionally select a fast interval of 10 seconds between observations.
        53:R >> routing technology(e.g. Anycast)
        53:R >> Trafic policy, trafic flow
        53:R:M >> Google about this shit, not just remenber. You have configured for Route 53 and wish to configure failover options for your webservers.  What is the sequence of events when failover happens? ANSWER:  Route 53 conducts a health check of your application. If your application fails 4 consecutive health checks as an example, it triggers the next event. Route 53 will disable the resource record for the failed endpoint and no longer serves these records. The failover step ensures that traffic gets routed to health endpoints instead of the failed one.
        53:R >> Route 53 routing policy
        53:m >> Latency based routing. You can route traffic based on the lowest network latency for your end users so that your end users can experience a faster response time. You would use this form of routing when you have resources that serve the same functions located in different availability zones or regions.
        AWS:R  >>  Remember all various service parameter values e.g. timers, max limits, etc. for S3, SQS, DynamoDB
        IAM:R  >>  Options on authenticating using LDAP together with IAM.
        ELB:R  >>  ELB and session cookies (http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html)
        SWF:R  >>  API calls
        AWS:M  >>  Encryption: 256-bit Advanced Encryption Standard (AES-256)
        SWF:M  >>  SWF retention: 1 year  ,SWF Domain: 100 per account (containers for segregating app resources)  ,SWF Workflow/activity-10,000  ,SWF Request size: 1MB  ,SWF Open: 1000
        CF:M  >>  to get Output Data: Fn:GetAtt  , List all Resources: ListStackResources  , stack waiting: WaitCondition  ,  stack: 200  ,  Template: No limit  ,  Parameter: 60
        AWS:R  >>  Web Federation, Corporate network,
        ELB:R  >>  Sticky-sessions with ELB
        AWS:R  >>  For what languages AWS provide SDKs
        AWS:R  >>  CORS check where it can be used
        AWS:R  >>  WTF is Round Robin
        AWS:R  >>  Abbreviations for AWS exam.. e.g. DR, RPO, RTO, ect
        AWS:R  >>  Web Federation, Corporate network,
        AWS:M  >>  SDK default region Default region (us-east-1)
        SNOWBALL:R >>  Trusted Platform Module (TMP)
        AWS:R >> Access through OnPremice -> LDAP -> AWS -> IAM/STS -> S3(using temporal .. sth)
        IAM:R >>  MFA-Protected API Access
